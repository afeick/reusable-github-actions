name: Create Release

on:
  workflow_call:
    inputs:
      pr_label_major:
        description: "PR label name to use for bumping the major version."
        required: false
        default: "major"
      pr_label_minor:
        description: "PR label name to use for bumping the minor version."
        required: false
        default: "minor"
      pr_label_patch:
        description: "PR label name to use for bumping the patch version."
        required: false
        default: "patch"
      pr_label_norelease:
        description: "PR label name to use for skipping the release."
        required: false
        default: "no version"
    secrets:
      token:
        description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT)'
        required: true

jobs:
  create_release:
    name: "Create Release"

    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install semver
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.token }}
          script: |
            const semver = require('semver');
            const creator = context.payload.sender.login;
            console.log(context.payload.sender);
            // get version label
            let valid_labels = ["${{ inputs.pr_label_major }}", "${{ inputs.pr_label_minor }}", "${{ inputs.pr_label_patch }}", "${{ inputs.pr_label_norelease }}"];
            let label_set = new Set(valid_labels);

            const all_labels = context.payload.pull_request.labels;

            var version_label = "";
            all_labels.forEach((label) => {
              if (label_set.has(label.name)) {
                version_label = label.name;
              }
            });

            if(!version_label) {
              core.setFailed("No version label set")
            }

            var version_tags = [];
            // get list of tags
            await github.paginate(
              github.rest.repos.listTags,
              {
                owner: context.repo.owner,
                repo: context.repo.repo
              })
              .then((tags) => {
                tags.forEach((tag) => {
                  let clean_tag = semver.clean(tag.name);
                  version_tags.push(semver.parse(clean_tag));
                });
              });

            // sort tags by semantic version
            let sorted_tags = version_tags.sort(semver.rcompare)
            // grab 'newest' tag
            let latest_tag = (sorted_tags.length > 0) ? sorted_tags[0] : semver.parse("0.0.0");
            var new_tag;
            switch(version_label) {
              case "major":
                new_tag = semver.inc(latest_tag, 'major')
                break;
              case "minor":
                new_tag = semver.inc(latest_tag, 'minor')
                break;
              case "patch":
                new_tag = semver.inc(latest_tag, 'patch')
                break;
              case "no version":
                break;
                // do nothing
              default:
                core.setFailed("Unable to create a new release tag")
                break;
            }

            if (new_tag) {
              // create the release
              core.info(`Creating new release with tag: v${new_tag}`);
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `v${new_tag}`,
                generate_release_notes: true
              });
              core.exportVariable('APP_VERSION', new_tag)
              core.exportVariable('CREATE_RELEASE', 'true')
            } else {
              core.info("No version specified, not creating a release")
              core.exportVariable('CREATE_RELEASE','false')
            }
